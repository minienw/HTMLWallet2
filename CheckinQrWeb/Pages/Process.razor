@page "/process/{data}"

@using CheckInQrWeb.Core.Models.api.Identity
@using CheckInQrWeb.Components.Process;
@using CheckInQrWeb.Core
@using CheckInQrWeb.Core.Helpers
@using CheckInQrWeb.Core.Models
@using Newtonsoft.Json
@inject VerificationWorkflow _Workflow
@inject IDialogService _DialogService;

<MudGrid class="mud-theme-primary rounded">
    <MudItem xs="8">
        <MudText Typo="Typo.h4">Covid Certificate Verification for Travellers</MudText>
    </MudItem>
</MudGrid>
<br/>
<p>You have been directed to this page by your travelling service provider.</p><br/>
<p>We have found the following request:</p><br/>
<MudGrid>
    <MudItem xs="8">Service Provider: @_Workflow.InitiatingQrPayload.ServiceProvider</MudItem>
    <MudItem xs="8">Protocol: @_Workflow.InitiatingQrPayload.Protocol</MudItem>
    <MudItem xs="8">Protocol Version: @_Workflow.InitiatingQrPayload.ProtocolVersion</MudItem>
    <MudItem xs="8">Subject: @_Workflow.InitiatingQrPayload.Subject</MudItem>
</MudGrid>

<MudGrid>
@*    <MudItem xs="8">
        <MudAlert Typo="Typo.h5" Icon="Warning" >@_Workflow.InitiatingQrPayload.Consent</MudAlert>
    </MudItem>
*@    
    <MudItem xs="8">Please upload an image of your Covid Certificate QR code:</MudItem>
    <MudItem xs="8">
        <DccQrUploadComponent Disabled="@(WorkflowCompleted)" OnQRUploaded="Validate"></DccQrUploadComponent>
    </MudItem>

@if (WorkflowCompleted && WorkflowSuccess.HasValue && WorkflowSuccess.Value)
{
    <MudItem xs="8">Verification sucessful.</MudItem>
    <MudItem xs="8">The DCC contained the following identifying information which will be sent to the Airline:</MudItem>
    <MudItem xs="8">Given Name: @DccExtract.gnt</MudItem>
    <MudItem xs="8">Family Name: @DccExtract.fnt</MudItem>
    <MudItem xs="8">Date of Birth: @DccExtract.dob</MudItem>

    <MudItem xs="8">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ThumbUpAlt" Style="background-color: yellowgreen; color: white; width: 200px; height: 80px;" OnClick="Notify">
                Verification successful - Send result to @_Workflow.InitiatingQrPayload.ServiceProvider
        </MudButton>
    </MudItem>
}

@if (WorkflowCompleted && WorkflowSuccess.HasValue && !WorkflowSuccess.Value)
{
    <MudItem xs="8">Verification did not succeed for the following reasons:</MudItem>
    <MudItem> 
        <MudGrid>
            <MudTable Items="@FailureMessages" Hover="true" Breakpoint="Breakpoint.Sm" T="FailureItem">
                <HeaderContent>
                    <MudTh>Type</MudTh>
                    <MudTh>Id</MudTh>
                    <MudTh>Message</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.type</MudTd>
                    <MudTd>@context.ruleIdentifier</MudTd>
                    <MudTd>@context.customMessage</MudTd>
                </RowTemplate>
            </MudTable>
        </MudGrid>
    </MudItem>
}

@*<MudItem xs="12">
    <MudAlert Severity="Severity.Error" Class="rounded-0"><p>@WorkflowMessage</p></MudAlert>
</MudItem>*@

@if (WorkflowExiting)
{
    <MudItem xs="8">
        <MudAlert Severity="Severity.Info" Class="rounded-0">
            <p>You can close this browser window and continue with the check-in procedure at the airline webpage.</p>
        </MudAlert>
    </MudItem>
}
</MudGrid>

@*<SimpleAudit Entries="@DebugMessages"></SimpleAudit>*@

@code {

    //TODO what data? QR code?
    [Parameter]
    public string Data { get; set; }

    private bool WorkflowCompleted { get; set; }
    private bool? WorkflowSuccess { get; set; }
    private string WorkflowMessage { get; set; }
    private bool NotifyEnabled { get; set; } 
    private bool WorkflowExiting { get; set; }

    private FailureItem[] FailureMessages { get; set; }

    private List<string> DebugMessages { get; set; } = new();
    private DccExtract DccExtract { get; set; }

    protected override void OnInitialized()
    {
        var r = _Workflow.OnInitialized(Data);

        if (!r.Success)
            DebugMessages.Clear();

        DebugMessages.AddRange(r.DebugMessages);
        WorkflowMessage = r.Message;
    }

    private async Task Validate(string dccQrData)
    {
        var consented = await _DialogService.ShowMessageBox("Continue?", _Workflow.InitiatingQrPayload.Consent.Split(";")[0], yesText: "Continue", cancelText: "Cancel");
        if (!consented ?? false)
        {
            WorkflowCompleted = true;
            WorkflowSuccess = false;
            WorkflowMessage = "Consent to send DCC for verification was not given.";
            WorkflowExiting = true;
            return;
        }

        var r = await _Workflow.ValidateDccAsync(dccQrData);
        WorkflowCompleted = true;
        DebugMessages.Clear();
        DebugMessages.AddRange(r.DebugMessages);
        WorkflowSuccess = r.Success;
        WorkflowMessage = r.Message;
        NotifyEnabled = r.Success;
        WorkflowExiting = !NotifyEnabled;

        if (!WorkflowSuccess ?? false)
        {
            FailureMessages = _Workflow.ResultToken.Claims
            .Where(x => x.Type == "results") //Flat and repeated.
            .Select(x => Format(x)).ToArray();
        }
        else
        {
            //{{"kid":"SsXyRIVSy4Y=","alg":"RS256"}.{"iss":"http://localhost:8081/identity","iat":1649073441,"exp":1649077041,"category":["standard"],"sub":"0123456789ABCDEF0123456789ABCDEF","result":"OK","results":[],"confirmation":"eyJraWQiOiJTc1h5UklWU3k0WT0iLCJhbGciOiJSUzI1NiJ9.eyJqdGkiOiIwMTIzNDU2Nzg5QUJDREVGMDEyMzQ1Njc4OUFCQ0RFRiIsInN1YiI6IjAxMjM0NTY3ODlBQkNERUYwMTIzNDU2Nzg5QUJDREVGIiwiaWF0IjoxNjQ5MDczNDQxLCJleHAiOjE2NDkwNzcwNDEsImNhdGVnb3J5IjpbInN0YW5kYXJkIl0sInJlc3VsdCI6Ik9LIiwicG9hIjoiQU1TIiwicG9kIjoiRlJBIiwidmFsaWRmcm9tIjoiMjAyMS0wMS0yOVQxMjowMDowMCswMTowMCIsInZhbGlkVG8iOiIyMDIxLTAxLTI5VDEyOjAwOjAwKzAxOjAwIiwidmFsaWRhdGlvbmNsb2NrIjoiMjAyMS0wMS0yOVQxMjowMDowMCswMTowMCIsInBlcnNvbmFsaW5mb2RjY2V4dHJhY3QiOnsiZm50IjoiQk9VV0VSIiwiZ250IjoiQk9CIiwiZG9iIjoiMTk2MC0wMS0wMSJ9fQ.tEN3E7s2KNgMa1rHfZrHqxoRwlGa-l7bzWOo8DNh8h53zg2TDz43vvsOnAiIhb02q_8YMHJiQJlivhLByhV13Ew9dnWEOs-5FQGgix3NsQGZ3Ez1kscMdqlFaKkzrSoEmnaAAAPB_lvpzlaazufnH-U94gPV-IlfsENXw_tSaA5an7FVffk1VxQRrhKo2Rwgy1qj5j3ge8LaATjOnFzbe6j1bwcOFq9x5cesSKw4LkhlfOBzgeLLq_DS58bmt50Hu8_PaarcXnuquDHds6kW87hczoMr3S1Z2WP3hhkx7nrY9wdaLUca6lxyUJtrFplT3u6hRieIHmrjbMzPCgGikg","personalinfodccextract":{"fnt":"BOUWER","gnt":"BOB","dob":"1960-01-01"}}}
            var value = _Workflow.ResultToken.Claims.SingleOrDefault(x => x.Type.Equals("personalinfodccextract", StringComparison.InvariantCultureIgnoreCase)).Value;
            DccExtract = JsonConvert.DeserializeObject<DccExtract>(value);
        }
        //debugMessages.Add($);
        //foreach (var i in resultsClaim)
        //    string.Join(";", )
        //    debugMessages.Add(i.ToString());
    }

    private FailureItem Format(System.Security.Claims.Claim claim)
    {
        return JsonConvert.DeserializeObject<FailureItem>(claim.Value);
    }

    private async Task Notify()
    {
        var splits = _Workflow.InitiatingQrPayload.Consent.Split(";");

        var v = splits.Length > 1 ? splits[1] : splits[0];

        var consented = await _DialogService.ShowMessageBox("Continue?", _Workflow.InitiatingQrPayload.Consent.Split(";")[1], yesText: "Continue", cancelText: "Cancel");

        if (!consented ?? false)
        {
            WorkflowCompleted = true;
            WorkflowSuccess = false;
            WorkflowMessage = "Consent to send verification result to your service provider was not given.";
            WorkflowExiting = true;
            NotifyEnabled = false;
            return;
        }

        var r = await _Workflow.NotifyServiceProvider();
        DebugMessages.Clear();
        DebugMessages.AddRange(r.DebugMessages);
        WorkflowMessage = r.Success ? r.Message : "The service provider did not recieve the result. Please try the process again.";
        NotifyEnabled = r.Success;
        WorkflowExiting = true;
    }
}